// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package myapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FieldServiceClient is the client API for FieldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldServiceClient interface {
	AddField(ctx context.Context, in *AddFieldParams, opts ...grpc.CallOption) (*FieldObject, error)
	DeleteField(ctx context.Context, in *DeleteFieldParams, opts ...grpc.CallOption) (*DeleteFieldResponse, error)
	GetField(ctx context.Context, in *GetFieldParams, opts ...grpc.CallOption) (*FieldResponse, error)
	//Websocket endpoint
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FieldService_SubscribeClient, error)
}

type fieldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldServiceClient(cc grpc.ClientConnInterface) FieldServiceClient {
	return &fieldServiceClient{cc}
}

func (c *fieldServiceClient) AddField(ctx context.Context, in *AddFieldParams, opts ...grpc.CallOption) (*FieldObject, error) {
	out := new(FieldObject)
	err := c.cc.Invoke(ctx, "/FieldService/AddField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) DeleteField(ctx context.Context, in *DeleteFieldParams, opts ...grpc.CallOption) (*DeleteFieldResponse, error) {
	out := new(DeleteFieldResponse)
	err := c.cc.Invoke(ctx, "/FieldService/DeleteField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) GetField(ctx context.Context, in *GetFieldParams, opts ...grpc.CallOption) (*FieldResponse, error) {
	out := new(FieldResponse)
	err := c.cc.Invoke(ctx, "/FieldService/GetField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (FieldService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FieldService_serviceDesc.Streams[0], "/FieldService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &fieldServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FieldService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type fieldServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *fieldServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FieldServiceServer is the server API for FieldService service.
// All implementations must embed UnimplementedFieldServiceServer
// for forward compatibility
type FieldServiceServer interface {
	AddField(context.Context, *AddFieldParams) (*FieldObject, error)
	DeleteField(context.Context, *DeleteFieldParams) (*DeleteFieldResponse, error)
	GetField(context.Context, *GetFieldParams) (*FieldResponse, error)
	//Websocket endpoint
	Subscribe(*SubscribeRequest, FieldService_SubscribeServer) error
	mustEmbedUnimplementedFieldServiceServer()
}

// UnimplementedFieldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFieldServiceServer struct {
}

func (UnimplementedFieldServiceServer) AddField(context.Context, *AddFieldParams) (*FieldObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddField not implemented")
}
func (UnimplementedFieldServiceServer) DeleteField(context.Context, *DeleteFieldParams) (*DeleteFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedFieldServiceServer) GetField(context.Context, *GetFieldParams) (*FieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetField not implemented")
}
func (UnimplementedFieldServiceServer) Subscribe(*SubscribeRequest, FieldService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedFieldServiceServer) mustEmbedUnimplementedFieldServiceServer() {}

// UnsafeFieldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldServiceServer will
// result in compilation errors.
type UnsafeFieldServiceServer interface {
	mustEmbedUnimplementedFieldServiceServer()
}

func RegisterFieldServiceServer(s grpc.ServiceRegistrar, srv FieldServiceServer) {
	s.RegisterService(&_FieldService_serviceDesc, srv)
}

func _FieldService_AddField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFieldParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).AddField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FieldService/AddField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).AddField(ctx, req.(*AddFieldParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FieldService/DeleteField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).DeleteField(ctx, req.(*DeleteFieldParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_GetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldServiceServer).GetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FieldService/GetField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldServiceServer).GetField(ctx, req.(*GetFieldParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FieldServiceServer).Subscribe(m, &fieldServiceSubscribeServer{stream})
}

type FieldService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type fieldServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *fieldServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _FieldService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FieldService",
	HandlerType: (*FieldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddField",
			Handler:    _FieldService_AddField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _FieldService_DeleteField_Handler,
		},
		{
			MethodName: "GetField",
			Handler:    _FieldService_GetField_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _FieldService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "field.proto",
}
